---
title: "Test File"
author: "Magne"
format: html
editor: visual
---

## Loading libraries

Loading packages needed

change

```{r}
#library(eurostat)
#library(tidyverse)
#library(magrittr)
#library(httr)
#library(rjstat)



pacman::p_load(tidyverse, eurostat, magrittr, httr, rjstat)

```

## Downloading data

Downloading data and making it into a dataframe

```{r}
#| echo: false

#Eurostat data code:SBS_SC_SCA_R2
#Eurostat query builder: https://ec.europa.eu/eurostat/web/query-builder/tool
url <- "https://ec.europa.eu/eurostat/api/dissemination/statistics/1.0/data/sbs_sc_sca_r2?format=JSON&indic_sb=V12150&indic_sb=V16110&indic_sb=V91110&size_emp=TOTAL&nace_r2=B&nace_r2=C&nace_r2=D&lang=en"
getresponse <- GET(url)
json <- content(getresponse, as = "text")
df <- fromJSONstat(json)
head(df)


###Eurostat API
# search_eurostat("Annual enterprise statistics by size class for special aggregates of activities") %>% 
#   head()

#api <- get_eurostat("sbs_sc_sca_r2")

# a <- get_eurostat("SBS_SC_SCA_R2")
#   filters = list(na_item = "B1GQ",
#                             unit = "CP_MEUR", #wrong
#                             geo = c("BE", "DE"),
#                             time = c("2016", "2017"))) %>%
#   head()



```

## Wrangling Data

Creating cleaned df3

```{r}
#| echo: false

colnames(df)

# Removing and renaming colomns
df1 <- df
df1$`Time frequency` <- NULL
df1$`Size classes in number of persons employed` <- NULL
df1 <- df1 %>% 
  rename(category = "Statistical classification of economic activities in the European Community (NACE Rev. 2)",
  indicator = "Economical indicator for structural business statistics",
  country = "Geopolitical entity (reporting)",
  year = "Time",
  value_added1 = "value")

# Make the indicators into new Columns to cut down number of observations
df2 <- df1 %>% 
  pivot_wider(names_from = indicator, values_from = value_added1)

df2$`Apparent labour productivity (Gross value added per person employed) - thousand euro` <- NULL

df2 <- df2 %>% 
  rename(value_added = "Value added at factor cost - million euro",
  employed = "Persons employed - number")

df2$value_per_employe <- df2$value_added/df2$employed

# Removing all NA observations for quick view
df3 <- df2 %>% 
  filter(!(is.na(value_added) & is.na(value_per_employe)))

# Example to filter out just one nation
#df1 <- df %>% 
  #filter(`Geopolitical entity (reporting)` == "Belgium") #Use ` not '

```

## Adding Letter Codes to Dataset

Import nace letter codes and add them to our dataset

Creating nace_codes2

Creating new df4 with letter codes

```{r}
#| echo: false

# Import nace files and make names lower case
nace_codes <- read.csv("nace codes.csv")
nace_codes1 <- nace_codes
names(nace_codes1) <- tolower(names(nace_codes1))

#colnames(nace_codes)

# Add section to all observations
nace_codes1$section <- ifelse((nace_codes1$section == ""), NA, nace_codes1$section)
nace_codes1 <- nace_codes1 %>%
  fill(section, .direction = "down")

# Add group value of the subsequent value as long as class is not NA
for (i in 2:nrow(nace_codes1)) {
  if (!is.na(nace_codes1$class[i])) {
    nace_codes1$group[i] <- nace_codes1$group[i - 1]
  }
}

# Add division value of the subsequent divison as long as group is not NA
for (i in 2:nrow(nace_codes1)) {
  if (!is.na(nace_codes1$group[i])) {
    nace_codes1$division[i] <- nace_codes1$division[i - 1]
  }
}

# Could not get this code to work without replacing everything, which is problematic as it removed the top empty categories
#nace_codes1 <- nace_codes1 %>%
  #fill(division, .direction = "down")

# Combine variables to create unified nace_code
nace_codes1$nace_code <- paste(nace_codes1$section, ifelse(is.na(nace_codes1$group), ifelse(is.na(nace_codes1$division), "", nace_codes1$division), nace_codes1$group), sep = "")
# Remove unused variables
nace_codes2 <- nace_codes1 %>%
  select(-class, -isicrev..4)

# Put nace_code first
nace_codes2 <- nace_codes2 %>%
  select(nace_code, everything())


### Check for nace_code name(activity), then merge nace_codes 2 variables with main dataframe
# Lowercase
df3$category_lower <- tolower(df3$category)
nace_codes2$activity_lower <- tolower(nace_codes2$activity)
# Merge
df4 <- merge(x = df3, y = nace_codes2, by.x = "category_lower", by.y = "activity_lower", all.x = TRUE)
df4 <- df4 %>%
  select(-category_lower, -activity)

# Reorder and renaming
df4 <- df4 %>% 
  select(year, country, nace_code, section, division, group, everything())
df4 <- df4 %>% 
  rename(name = category)
```
