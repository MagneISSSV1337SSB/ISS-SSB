---
title: "Test File"
author: "Magne"
format: html
editor: visual
---

## Loading libraries

Loading packages needed

```{r}
pacman::p_load(tidyverse, eurostat, magrittr, httr, rjstat, rlang, colorspace, imputeTS)

library(zoo)
```

## Downloading data

Downloading data and making it into a dataframe

```{r}
#| echo: false

# Eurostat data code:SBS_SC_SCA_R2
# Eurostat query builder: https://ec.europa.eu/eurostat/web/query-builder/tool
#old_url <- "https://ec.europa.eu/eurostat/api/dissemination/statistics/1.0/data/sbs_sc_sca_r2?format=JSON&indic_sb=V12150&indic_sb=V16110&indic_sb=V91110&size_emp=TOTAL&nace_r2=B&nace_r2=C&nace_r2=D&lang=en"

# Time option: since 2005
# INDIC_SB:
  # V12150 Value added at factor cost - million euro
  # V16110 - Persons employed - number
# SIZE_EMP : TOTAL
# NACE_R2 : B-N_S95_X_K and all main sections divisions and groups (Main letters and up to 2 numbers B099 yes, C101 no)

url <- "https://ec.europa.eu/eurostat/api/dissemination/statistics/1.0/data/sbs_sc_sca_r2?format=JSON&sinceTimePeriod=2005&indic_sb=V12150&indic_sb=V16110&size_emp=TOTAL&nace_r2=B-N_S95_X_K&nace_r2=B&nace_r2=B05&nace_r2=B051&nace_r2=B052&nace_r2=B06&nace_r2=B061&nace_r2=B062&nace_r2=B07&nace_r2=B071&nace_r2=B072&nace_r2=B08&nace_r2=B081&nace_r2=B089&nace_r2=B09&nace_r2=B091&nace_r2=B099&nace_r2=C&nace_r2=C10&nace_r2=C11&nace_r2=C12&nace_r2=C13&nace_r2=C14&nace_r2=C15&nace_r2=C16&nace_r2=C17&nace_r2=C18&nace_r2=C19&nace_r2=C20&nace_r2=C21&nace_r2=C22&nace_r2=C23&nace_r2=C24&nace_r2=C25&nace_r2=C26&nace_r2=C27&nace_r2=C28&nace_r2=C29&nace_r2=C30&nace_r2=C31&nace_r2=C32&nace_r2=C33&nace_r2=D&nace_r2=D35&nace_r2=E&nace_r2=E36&nace_r2=E37&nace_r2=E38&nace_r2=E39&nace_r2=F&nace_r2=F41&nace_r2=F42&nace_r2=F43&nace_r2=G&nace_r2=G45&nace_r2=G46&nace_r2=G47&nace_r2=H&nace_r2=H49&nace_r2=H50&nace_r2=H51&nace_r2=H52&nace_r2=H53&nace_r2=I&nace_r2=I55&nace_r2=I56&nace_r2=J&nace_r2=J58&nace_r2=J59&nace_r2=J60&nace_r2=J61&nace_r2=J62&nace_r2=J63&nace_r2=L&nace_r2=L68&nace_r2=M&nace_r2=M69&nace_r2=M70&nace_r2=M71&nace_r2=M72&nace_r2=M73&nace_r2=M74&nace_r2=M75&nace_r2=N&nace_r2=N77&nace_r2=N78&nace_r2=N79&nace_r2=N80&nace_r2=N81&nace_r2=N82&nace_r2=S95&lang=en"
getresponse <- GET(url)
json <- content(getresponse, as = "text")
df <- fromJSONstat(json)

# Removing scientific number format
options(scipen=999)


###Eurostat API
## Note: Initialy importing the file through API is alot slower than using the Eurostat query builder
# comparable_countries_full <- c("Norway", "Finland", "Sweden", "Denmark", "Luxembourg", "Netherlands", "Iceland", "Ireland", "Belgium", "Germany", "Estonia")
# comparable_countries_short <- c("NO", "FI", "SE", "DK", "LU", "NL", "IS", "IE", "BE", "DE", "EE")
# api <- get_eurostat("sbs_sc_sca_r2",
#   filters = list(size_emp = "TOTAL",
#                  geo = comparable_countries_short),
#                 indic_sb = c("V12150", "V16110"), # This line does not work, no clue why
#   cache = FALSE,
#   time_format = "num")
```

## Wrangling Data

Creating cleaned df2

```{r}
#| echo: false

### Removing and renaming colomns
# Removing duplicates
df1 <- df %>%
  distinct()
df1$`Time frequency` <- NULL
df1$`Size classes in number of persons employed` <- NULL
df1 <- df1 %>% 
  rename(category = "Statistical classification of economic activities in the European Community (NACE Rev. 2)",
  indicator = "Economical indicator for structural business statistics",
  country = "Geopolitical entity (reporting)",
  year = "Time",
  value_added1 = "value")

### Find and remove fake duplicates with one NA and one non NA value
df1 <- df1 %>% distinct(category, country, year, indicator, .keep_all = TRUE)


### Make the indicators into new Columns to cut down number of observations
df2 <- df1 %>% 
  pivot_wider(names_from = indicator, values_from = value_added1)

df2 <- df2 %>% 
  rename(value_added = "Value added at factor cost - million euro",
  employed = "Persons employed - number")

# Fix year to be numeric
df2 <- df2 %>%
  mutate(year = as.numeric(year))

# Set negative value added to equal 0
df2 <- df2 %>% 
  mutate(value_added = ifelse(value_added < 0, 0, value_added))

```

## Missing Values - Interpolation

Removing years 2005-2008 as most nations do not have any observations for that time period

Creating new df3

Tried using Mice, missForest, linear regression, interpolation, mean, median.

None of these were ideal as they could create large issues

Write a part for why each of them were not ideal

As such we descided to use:

na.locf: NA observation before first observation with value gets the value of the first observation with a value. Or NA obervation after last obervation with value gets the value of the last obervation with a value.

na:approx It create the linear trend (number above + number below)/2 for NA observations between observations with values. If there are multiple missing between it adds values so that the (number above + number below)/2 pattern is followed

```{r}
#| echo: false

### Interpolation see the trend
#Lising what nations to be kept
comparable_countries_full <- c("Norway", "Finland", "Sweden", "Denmark", "Luxembourg", "Netherlands", "Iceland", "Ireland", "Belgium", "Germany", "Estonia")

#comparable_countries_full <- c("Norway")

# Create new dataset keeping only comparable countries
df3 <- df2 %>% 
  filter(country %in% comparable_countries_full) 

# Count number of NAs in 'value_added' for each year
df3_na_counts <- df3 %>%
  group_by(year) %>%
  summarize(na_count = sum(is.na(value_added)))   
# Here we see that there is a significant higher amount of NA observations in 2005-2007. As such we will remove them

# Filtering data for years after 2007, removing 'value_per_employee' column,
# converting 'category' and 'country' into factors, and creating NA markers
df3 <- df3 %>% 
  filter(year > 2007) %>% 
  mutate(
    category = as.factor(category), 
    country = as.factor(country),
    value_added_na = ifelse(is.na(value_added), 1, 0),
    employed_na = ifelse(is.na(employed), 1, 0)
  )

# Grouping by 'country' and 'category', sorting by 'year',
# filling NA with linear approximations or the last non-NA (from the right)
df3 <- df3 %>% 
  group_by(country, category) %>% 
  arrange(year) %>% 
  mutate(
    value_added = ifelse(is.na(value_added), na.approx(value_added, na.rm = FALSE), value_added),
    employed = ifelse(is.na(employed), na.approx(employed, na.rm = FALSE), employed),
    value_added = ifelse(is.na(value_added), na.locf(value_added, fromLast = TRUE), value_added),
    employed = ifelse(is.na(employed), na.locf(employed, fromLast = TRUE), employed)
  ) %>% 
  ungroup()



# TODO Look at places that get infinite and negative values in df4, having 0 employed, but value due to interpolation. Look into making these observations into NA instead
```

## Adding Letter Codes to Dataset

Import nace letter codes and add them to our dataset

Creating nace_codes2

Creating new df4 with letter codes

```{r}
#| echo: false

# Import nace files and make names lower case, add A to all coresponding sections
nace_codes <- read.csv("nace codes.csv")
nace_codes1 <- nace_codes %>% 
  rename_all(tolower) %>%
  mutate(section = ifelse((section == ""), NA, section)) %>%
  fill(section, .direction = "down")

# Add group value of the subsequent value and divisions as long as class is not NA
for (i in 2:nrow(nace_codes1)) {
  if (!is.na(nace_codes1$class[i])) {
    nace_codes1$group[i] <- nace_codes1$group[i - 1]}
  if (!is.na(nace_codes1$group[i])) {
    nace_codes1$division[i] <- nace_codes1$division[i - 1]}}

# Combine variables to create unified nace_code
nace_codes1$nace_code <- paste(nace_codes1$section, ifelse(is.na(nace_codes1$group), ifelse(is.na(nace_codes1$division), "", nace_codes1$division), nace_codes1$group), sep = "")

# Lowercase as thedata set uses different capitalization p1...
nace_codes2 <- nace_codes1 %>% mutate(activity = tolower(activity))

# If a group has same name(activity) as division, then remove group observation
nace_codes2 <- nace_codes2 %>%
  group_by(activity) %>%
  filter((is.na(group) | row_number() == 1) & (is.na(division) | row_number() == 1)) %>% ungroup()

# Removing duplicates and remove unused variables
nace_codes2 <- nace_codes2 %>% 
  filter(is.na(class)) %>%
  select(-class, -isicrev..4)

# Add NACE level 1-3 based on length of nace_code
nace_codes2$level <- nchar(gsub("\\.", "", nace_codes2$nace_code)) #ignore .

# Add all NACE code 
total_name <- "total business economy; repair of computers, personal and household goods; except financial and insurance activities"
total_nace_code <- "B-N_S95_X_K" #set as level 0, manually set this afterwards
nace_codes2 <- rbind(nace_codes2, data.frame(level = 0, nace_code = total_nace_code, section = "B-N_S95_X_K", division = NA, group = NA, activity = total_name)) %>% 
  select(level, nace_code, everything())


nace_codes2_example <- nace_codes2 %>% 
  mutate(section = ifelse(section == "B-N_S95_X_K", ".B-N_S95_X_K", section)) %>% 
  filter(section %in% c(".B-N_S95_X_K", "A", "B"))


### Check for nace_code name(activity), then merge nace_codes 2 variables with main dataframe
# Lowercase as the data set uses different capitalization p2...
df3$category_lower <- tolower(df3$category)
# Merge
df3 <- merge(x = df3, y = nace_codes2, by.x = "category_lower", by.y = "activity", all = FALSE)

df3 <- df3 %>%
  select(-category_lower)

# Reorder and renaming
df3 <- df3 %>% 
  select(year, country, level, nace_code, section, division, group, everything())
df3 <- df3 %>% 
  rename(name = category)

```

## Adding value added and employe percentages for each level

Create df4 with value added population and percentage for each level

Added value per employe and growth rates to df4, not this has not been cleaned, there are some

```{r}
#| echo: false

df4 <- data.frame()

# Loop over each level
for(l in unique(df3$level)) {
  for (y in unique(df3$year)) {
  # Filter the data for the current level
  temp_df <- df3 %>%
    filter(level == l & year == y) %>%
    group_by(country) %>%
    mutate(total_value_added_country = sum(value_added, na.rm = TRUE),
           level_value_percentage = ifelse(!is.na(value_added), 
                               (value_added / total_value_added_country) * 100,
                               NA)) %>% 
    mutate(total_population_country = sum(employed, na.rm = TRUE),
           level_population_percentage = ifelse(!is.na(employed), 
                               (employed / total_population_country) * 100,
                               NA)) 
  # Remove unecesary paramters
  temp_df <- temp_df %>% select(-total_value_added_country, -total_population_country)
  # Combine the data
  df4 <- rbind(df4, temp_df)
  }
}


#Calculate value per employe
df4$value_per_employe <- df4$value_added/df4$employed

# Growth rates
df4 <- df4 %>%
  group_by(country, nace_code) %>%
  arrange(year) %>%
  mutate(value_added_growth_percentage = (value_added/lag(value_added) - 1)*100,
         population_growth_percentage = (employed/lag(employed) - 1)*100) %>%
  ungroup()


### Removing all NA value_added observations for quick view
# df4_no_NA <- df4 %>%
#   filter(!(is.na(value_added) & is.na(value_per_employe)))
# 
# df4_no_NA <- df4_no_NA %>% 
#   filter(country == "Norway" & year > 2009)
```

## Individual Country Overview(Structural Development)

GGplot country comparisons

```{r}
#| echo: false


# Subset the data
df4_nor <- subset(df4, level == 1 & country == "Norway")
df4_nor_2020 <- subset(df4, level == 1 & country == "Norway" & year == 2020)

# Sorting so that it is alpahbetically
df4_nor_2020$nace_code <- factor(df4_nor_2020$nace_code, levels = rev(sort(unique(df4_nor_2020$nace_code))))

# Horizontal Bar Plot
ggplot(df4_nor_2020, aes(x = nace_code, y = value_added, fill = factor(value_added))) +
  geom_col(position = "dodge") +
  coord_flip() +
  theme_minimal() +
  labs(
    title = paste("Value Added in", df4_nor_2020$country, "based on NACE sectors", df4_nor_2020$year),
    y = "Value Added (in Million Euro)",
    x = "NACE Categories",
    fill = "Value Added"
  ) +
  theme(legend.position = "none")

# Create the pie chart
ggplot(df4_nor_2020, aes(x = "", y = value_added, fill = factor(nace_code))) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  theme_void() +
  labs(title = paste("Value Added in", df4_nor_2020$country, "based on NACE sectors", df4_nor_2020$year),
       x = NULL, 
       y = "Value Added (in Million Euro)", 
       fill = "NACE Categories") +
  theme(legend.position = "bottom")


### Area chart
# Subset the data
df4_nor_multiyear <- subset(df4, level == 1 & country == "Norway")

# Remove observations before 2008
df4_nor_multiyear <- df4_nor_multiyear %>% 
  filter(year > 2011)

# Convert 'year' to factor
df4_nor_multiyear$year <- as.integer(df4_nor_multiyear$year)

# Create an area chart
ggplot(df4_nor_multiyear, aes(x = year, y = level_population_percentage, fill = nace_code)) +
  geom_area() +
  theme_minimal() +
  labs(
    title = paste("Value Added in", unique(df4_nor_multiyear$country), "based on NACE sectors over time"),
    y = "Value Added (%)",
    x = "Year",
    fill = "NACE Categories"
  ) +
   scale_x_continuous(breaks = min(df4_nor_multiyear$year):max(df4_nor_multiyear$year)) +
  theme(legend.position = "bottom")

```

## Individual Country Overview(Structural Development) 2

GGplot country comparisons, fills self

```{r}
#| echo: false

### Dataframe to fill in ggplot titles and y
ggplot_indicator <- data.frame(indicator = c("value_added","employed",        "value_per_employe","level_value_percentage","level_population_percentage"),
                             title = c("Value Added","Number of Employed","Value Added per Employe","Percent of Value Added", "Percent of Employes"),
                             y = c("Value Added (in Million Euro)", "Number of Employed", "Value Added per Employe (in Million Euro)", "Percent of Value Added", "Percent of Employes"))


# Defining color palette based on nace_code to keep it
#palette <- rainbow(length(unique(subset(df4, subset = level == 1)$nace_code)))
palette <- qualitative_hcl(length(unique(subset(df4, subset = level == 1)$nace_code)))


### Horizontal Bar Plot year interchangable
## Descide year, countries and indicator
year1 <- 2020
country1 <- c("Norway", "Denmark", "Sweden", "Netherlands")
##unique(ggplot_indicator$indicator) # See what indicators you can use
#indicator1 <- "level_population_percentage"
#indicator1 <- "level_value_percentage"
indicator1 <- "value_per_employe"

# Defining GGplot inputs and creating ne wdataset
y_label <- filter(ggplot_indicator, indicator == indicator1) %>% pull(y)
title_label <- filter(ggplot_indicator, indicator == indicator1) %>% pull(title)
df4_sub <- subset(df4,level == 1 & year == year1 & country %in% country1)
#df4_sub <- subset(df4,nace_code == "M72" & year == year1 & country %in% country1)


# ggplot
ggplot(df4_sub, aes(x = factor(nace_code, levels = rev(sort(unique(nace_code)))), y = !!sym(indicator1), fill = nace_code)) +
  geom_col(width = 0.6) +
  coord_flip() +
  theme_minimal() +
  facet_wrap(~ country) +
  scale_fill_manual(values = palette) +
  labs(
    title = paste(title_label,"in each country based on NACE sectors", year1),
    y = y_label,
    x = "NACE Categories",
    fill = "NACE Code"
  ) +
  theme(legend.position = "none")

```

## Country Comparison (Structural Development)

GGplot country comparisons

```{r}
#| echo: false


# Norway and Sweden B
df4_compare <- df4 %>%
  filter(country %in% c("Norway", "Sweden", "Denmark", "Netherlands"), nace_code == "C")

# GGplot geom_line
ggplot(df4_compare, aes(x = year, y = value_per_employe, colour = country)) +
  geom_line() +
  labs(title = "Efficiency (NACE code C)",
       x = "Year",
       y = "Efficiency") +
  theme_minimal()

```

## Dashboard (Shiny)

Make shiny dashboard

From dropdown get the choice of category like this format: (M72) Research and Decelopments

```{r}
#| echo: false

library(shiny)
library(shinydashboard)


ui <- dashboardPage(
  dashboardHeader(title = "Changes in The Industrial Structure in Norway and Comparative Countries"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Individual Country Overview", tabName = "tab1"),
      menuItem("Country Comparison Overview", tabName = "tab2")
    )
  ),
  dashboardBody(
    tabItems(
      tabItem(tabName = "tab1",
        h2("Individual Country Overview content"),
      ),
      tabItem(tabName = "tab2",
        selectInput("countries", "Select Countries", choices = comparable_countries_full, multiple = TRUE),  # The dropdown menu
        plotOutput("plot1")  # Place to display the plot
      )
    )
  )
)

server <- function(input, output) { 
  output$plot1 <- renderPlot({
    # Here is where you would use input$countries to adjust your plot based on the selected countries
    # For example, you could filter df4_sub based on the selected countries
    filtered_df <- df4_sub[df4_sub$country %in% input$countries, ]  # This assumes df4_sub has a column named 'country'
    
    ggplot(filtered_df, aes(x = factor(nace_code, levels = rev(sort(unique(nace_code)))), y = !!sym(indicator1), fill = nace_code)) +
      geom_col(width = 0.6) +
      coord_flip() +
      theme_minimal() +
      facet_wrap(~ country) +
      scale_fill_manual(values = palette) +
      labs(
        title = paste(title_label,"in each country based on NACE sectors", year1),
        y = y_label,
        x = "NACE Categories",
        fill = "NACE Code"
      ) +
      theme(legend.position = "none")
  })
}


shinyApp(ui, server)
```

## Regression GLM model

Add total economy as a variable to all observations, then run regression on individual variables on how it impacts the total economy

Test M72 population %

```{r}
#| echo: false



```
